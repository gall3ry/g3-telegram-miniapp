name: Fly Deploy
on:
  push:
    branches:
      - main    # change to main if needed
      - tin/setup-fly
jobs:
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    concurrency: deploy-group    # optional: ensure only one action runs at a time
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          IMAGE="bot"
          echo ::set-output name=tagged_image::${IMAGE}:${TAG}
          echo ::set-output name=tag::${TAG}

      - name: Set up Docker Buildx
        id: buildx
        # Use the action from the master, as we've seen some inconsistencies with @v1
        # Issue: https://github.com/docker/build-push-action/issues/286
        uses: docker/setup-buildx-action@master
        # Only worked for us with this option on ü§∑‚Äç‚ôÇÔ∏è
        with:
          install: true
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Build production image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile.bot
          # Set the desired build target here
          target: runner
          load: true
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Deploy app (bot)
        run: flyctl deploy --build-arg TURBO_TEAM="${{ secrets.TURBO_TEAM }}" --build-arg TURBO_TOKEN="${{ secrets.TURBO_TOKEN }}" -c ./fly.bot.toml --image ${{ steps.prep.outputs.tagged_image }} 
      
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
