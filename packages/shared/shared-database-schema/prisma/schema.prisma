generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "darwin-arm64", "rhel-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          Int     @id @default(autoincrement())
    displayName String?
    avatarUrl   String?

    point      Int          @default(0)
    RewardLogs RewardLogs[]
    Provider   Provider[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    countryCode        String?
    DailyQuestLog      DailyQuestLog[]
    DailyQuestUserInfo DailyQuestUserInfo?
}

model RewardLogs {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    taskId String
    point  Int
    userId Int

    metadata Json?

    @@index([userId])
}

enum ProviderType {
    TON_WALLET
    EVM_WALLET
    SOLANA_WALLET

    // web2
    TELEGRAM
}

// Main provider will be the first creation provider and cannot be deleted
model Provider {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type   ProviderType
    User   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int

    value String

    // Provider can has OCC
    Occ Occ[]

    @@unique([type, value])
}

model Occ {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    shareCount Int    @default(0)
    nftAddress String
    metadata   Json?
    txHash     String

    Provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId Int

    imageUrl String?

    GMSymbolOCC GMSymbolOCC?
}

model Share {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Sticker   Sticker? @relation(fields: [stickerId], references: [id], onDelete: Cascade)
    stickerId Int?

    superGroupUsername String
    messageId          String

    metadata          Json?
    reactionUpdatedAt DateTime?
    reactionCount     Int?

    Reaction Reaction[]
}

model Reaction {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Fields
    reactionType String
    count        Int

    share   Share @relation(fields: [shareId], references: [id], onDelete: Cascade)
    shareId Int

    unifiedCode String
}

model MapTonProofToPayload {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    payload String
}

model GMSymbolOCC {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Sticker     Sticker[]
    selectedNFT GMNFT[]

    nftLastUpdatedAt DateTime?

    Occ   Occ @relation(fields: [occId], references: [id], onDelete: Cascade)
    occId Int @unique

    exp     Int      @default(0)
    ExpLogs ExpLog[]
}

model GMNFT {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    GMSymbolOCC   GMSymbolOCC @relation(fields: [gMSymbolOCCId], references: [id], onDelete: Cascade)
    gMSymbolOCCId Int

    imageUrl         String?
    metadata         Json?
    templateMetadata Json?

    nftAddress String    @unique
    Sticker    Sticker[]
}

enum StickerType {
    GM1
    GM2
    GM3
    GM4

    // @deprecated
    Sample1
    GM5
}

model Sticker {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    shareCount Int     @default(0)
    Share      Share[]

    telegramFileId String?

    GMSymbolOCC   GMSymbolOCC? @relation(fields: [gMSymbolOCCId], references: [id], onDelete: Cascade)
    gMSymbolOCCId Int?

    imageUrl    String?
    stickerType StickerType

    GMNFT      GMNFT  @relation(fields: [nftAddress], references: [nftAddress], onDelete: Cascade)
    nftAddress String

    @@unique([stickerType, nftAddress])
}

model BotMessage {
    id       Int     @id @default(autoincrement())
    msg_type String
    user_id  Int
    hour     Int?
    message  String?
    payload  Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@index([user_id])
}

enum DailyQuestType {
    DAILY_LOGIN
    DAILY_SHARE_LEVEL_1
    DAILY_SHARE_LEVEL_2
    DAILY_SHARE_LEVEL_3
    DAILY_SHARE_LEVEL_4
    DAILY_SHARE_LEVEL_5
    DAILY_SHARE_LEVEL_6
}

model DailyQuestLog {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type     DailyQuestType
    point    Int
    exp      Int
    metadata Json?

    userId Int
    User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyQuestUserInfo {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId Int  @unique
    User   User @relation(fields: [userId], references: [id], onDelete: Cascade)

    lastLoginAt     DateTime?
    dailyShareCount Int       @default(0)
}

model ExpLog {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    metadata  Json?

    exp Int

    GMSymbolOCC   GMSymbolOCC? @relation(fields: [gMSymbolOCCId], references: [id])
    gMSymbolOCCId Int?
}
