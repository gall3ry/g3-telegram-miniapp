generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          Int     @id @default(autoincrement())
    displayName String?
    telegramId  String?
    avatarUrl   String?

    point      Int          @default(0)
    RewardLogs RewardLogs[]
    Provider   Provider[]
    Occ        Occ[]
}

model OccTemplate {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String?

    Occ Occ[]
}

model RewardLogs {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    taskId String? // should not optional
    point  Int
    userId Int

    @@index([userId])
}

enum ProviderType {
    TON_WALLET
}

model Provider {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type   ProviderType
    User   User?        @relation(fields: [userId], references: [id])
    userId Int?

    value String

    @@unique([type, value])
}

model Occ {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    occTemplate   OccTemplate @relation(fields: [occTemplateId], references: [id])
    occTemplateId Int

    user   User @relation(fields: [userId], references: [id])
    userId Int

    shareCount Int     @default(0)
    Share      Share[]

    nftAddress String? // TODO: should not optional

    metadata Json?

    @@index([userId])
}

model Share {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    occ   Occ @relation(fields: [occId], references: [id], onDelete: Cascade)
    occId Int

    superGroupUsername String
    messageId          String

    metadata          Json?
    reactionUpdatedAt DateTime?
    reactionCount     Int?

    Reaction Reaction[]
}

model Reaction {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Fields
    reactionType String
    count        Int

    share   Share @relation(fields: [shareId], references: [id], onDelete: Cascade)
    shareId Int

    unifiedCode String
}

model MapTonProofToPayload {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    payload String
}
